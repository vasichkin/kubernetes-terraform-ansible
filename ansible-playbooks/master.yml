- hosts: k8s_master
  become: yes
  tasks:
    - name: create an empty file for Kubeadm configuring
      copy:
        content: ""
        dest: /etc/kubernetes/kubeadm-config.yaml
        force: no

    - name: Get public IP
      ansible.builtin.shell: "curl -s https://checkip.amazonaws.com"
      register: public_ip

    - name: Show external IP
      ansible.builtin.debug:
        msg: "Kubernetes Master IP: {{ public_ip.stdout }}"

    - name: Run nslookup on the public IP
      command: "nslookup -type=ptr {{ public_ip.stdout }}"
      register: nslookup_output
      retries: 3
      delay: 2
      until: nslookup_output.rc == 0 and ('name = ' in nslookup_output.stdout)

    - name: Show nslookup output
      debug:
        msg: "nslookup {{ nslookup_output.stdout }}"

    - name: Extract hostname from nslookup output (PTR record)
      set_fact:
        ptr_records: "{{ nslookup_output.stdout | regex_findall('name = ([\\w\\-\\.]+)\\.') }}"

    - name: Set public_dns if PTR record exists
      set_fact:
        public_dns: "{{ ptr_records[0] if ptr_records | length > 0 else 'not found' }}"

    - name: Show resolved DNS
      debug:
        msg: "Resolved DNS for {{ public_ip.stdout }} is {{ public_dns }}"

    - name: configuring the container runtime including its cgroup driver
      blockinfile:
        path: /etc/kubernetes/kubeadm-config.yaml
        block: |
             kind: ClusterConfiguration
             apiVersion: kubeadm.k8s.io/v1beta3
             networking:
               podSubnet: "10.244.0.0/16"
               # To be able to add loadbalancer later
               control-plane-endpoint: {{ public_ip.stdout }} {{ public_dns }}
             apiServer:
               allow-privileged: true
               certSANs:
                 - 127.0.0.1
                 - {{ public_ip.stdout }}
                 - {{ public_dns }}
                 - your.domain.here
             ---
             kind: KubeletConfiguration
             apiVersion: kubelet.config.k8s.io/v1beta1
             runtimeRequestTimeout: "15m"
             cgroupDriver: "systemd"
             systemReserved:
               cpu: 100m
               memory: 350M
             kubeReserved:
               cpu: 100m
               memory: 50M
             enforceNodeAllocatable:
             - pods
             masterTaints: []



    - name: initialize the cluster (this could take some time)
      shell: "kubeadm init --config /etc/kubernetes/kubeadm-config.yaml >> cluster_initialized.log"
      args:
        chdir: /home/ubuntu
        creates: cluster_initialized.log

    - name: create .kube directory
      become: yes
      become_user: ubuntu
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755

    - name: copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: yes
        owner: ubuntu

    - name: install Pod network
      become: yes
      become_user: ubuntu
      shell: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml >> pod_network_setup.log
      args:
        chdir: $HOME
        creates: pod_network_setup.log
